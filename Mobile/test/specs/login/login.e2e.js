const { browser } = require('@wdio/globals')
const commands = require('../../../commands')
const data = require('../../fixtures/login-data.json')
const LoginPagePo = require('../../page-objects/LoginPagePo')

describe('Login Suite', ()=>{
    afterEach(async () => {
        await commands.restartApp()
    })

    beforeEach(async () => {
        const pageTitle = await LoginPagePo.loginPageTitle()
        expect(pageTitle).toBeExisting()
        const signupButton = await LoginPagePo.signupButton()
        await signupButton.click()
    })

    it('requires email', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        expect(nextButton).toBeEnabled()
    })

    it('requires valid email', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.invalidEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const emailNotFound = await LoginPagePo.emailNotFound()
        expect(emailNotFound).toBeExisting()
    })

    it('works with valid username', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validUsername)
        await browser.hideKeyboard()
        await nextButton.click()
        const loginButton = await LoginPagePo.loginButton()
        expect(loginButton).toBeDisabled()
        const passwordField = await LoginPagePo.passwordField()
        await passwordField.click()
        await passwordField.setValue(data.validPassword)
        await browser.hideKeyboard()
        expect(loginButton).toBeEnabled()
        await loginButton.click()
        const feed = await LoginPagePo.feed()
        expect(feed).toBeExisting()    
    })

    it('rejects invalid username', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.invalidUsername)
        await browser.hideKeyboard()
        await nextButton.click()
        const emailNotFound = await LoginPagePo.emailNotFound()
        expect(emailNotFound).toBeExisting()
    })

    it('requires password', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const loginButton = await LoginPagePo.loginButton()
        expect(loginButton).toBeDisabled()
        const passwordField = await LoginPagePo.passwordField()
        await passwordField.click()
        await passwordField.setValue(data.validPassword)
        await browser.hideKeyboard()
        expect(loginButton).toBeEnabled()
        await loginButton.click()
        const feed = await LoginPagePo.feed()
        expect(feed).toBeExisting()
    })

    it('requires valid password', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const loginButton = await LoginPagePo.loginButton()
        expect(loginButton).toBeDisabled()
        const passwordField = await LoginPagePo.passwordField()
        await passwordField.click()
        await passwordField.setValue(data.invalidPassword)
        await browser.hideKeyboard()
        await loginButton.click()
        const wrongPassword = await LoginPagePo.wrongPassword()
        expect(wrongPassword).toBeExisting()
    })

    it('shows forgot password link', async () => {
        const fogotPassword = await LoginPagePo.fogotPassword()
        expect(fogotPassword).toBeExisting()
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const forgotPasswordLink = await LoginPagePo.forgotPasswordLink()
        expect(forgotPasswordLink).toBeExisting()
    })

    it('shows sign up link', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const signUpLink = await LoginPagePo.signUpLink()
        expect(signUpLink).toBeExisting()
    })

    it('toggles show password', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const showPasswordButton = await LoginPagePo.showPasswordButton()
        expect(showPasswordButton).toBeExisting()
        const passwordField = await LoginPagePo.passwordField()
        await passwordField.click()
        await passwordField.setValue(data.validPassword)
        await browser.hideKeyboard()
        await showPasswordButton.click()
        const passwordText = await passwordField.getText()
        expect(passwordText).not.toBe(data.validPassword)
        await showPasswordButton.click()
        const passwordText2 = await passwordField.getText()
        expect(passwordText2).toBe(data.validPassword)
    })

    it('shows same email when returning to email screen', async () => {
        const nextButton = await LoginPagePo.nextButton()
        expect(nextButton).toBeDisabled()
        const emailField = await LoginPagePo.emailField()
        await emailField.click()
        await emailField.setValue(data.validEmail)
        await browser.hideKeyboard()
        await nextButton.click()
        const backButton = await LoginPagePo.backButton()
        expect(backButton).toBeExisting()
        await backButton.click()
        const emailField2 = await LoginPagePo.emailField()
        const emailText = await emailField2.getText()
        expect(emailText).toBe(data.validEmail)
    })
})